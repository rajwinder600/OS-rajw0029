import"string"


//Use a linker definition file (put the previous listing into that file)

#pragma link("mega65hyper.ld")

//Some definitions of addresses and special valves that this peogram uses

const char* RASTER = 0xd012;

const char* VIC_MEMORY = 0xd018;

const char* SCREEN = 0x0400;

const char* BGCOL = 0xd021;

const char* COLS = 0xd800;

const char BLACK = 0;

const char WHITE = 1;

//Some text to display

char[] MESSAGE = "checkpoint4.2 rajw0029 ";

volatile unsigned char *current_screen_line;

volatile unsigned char current_screen_x;




void main() {




}




void start_simple_program(){




*(unsigned char*)$0300=$80;

*(unsigned char*)$0301=$00;

*(unsigned char*)$0302=$81;

*(unsigned char*)$0303=$00;

*(unsigned char*)$0304=$00;

*(unsigned char*)$0305=$00;

*(unsigned char*)$0306=$00;

*(unsigned char*)$0307=$60;

*(unsigned char*)$0308=$02;

*(unsigned char*)$0309=$00;

*(unsigned char*)$030A=$02;

*(unsigned char*)$030B=$01;

*(unsigned char*)$030C=$08;

*(unsigned char*)$030D=$00;

*(unsigned char*)$030E=$00;

*(unsigned char*)$030F=$00;

*(unsigned char*)$0310=$60;

*(unsigned char*)$D701=$03;

*(unsigned char*)$D702=$00;

*(unsigned char*)$D705=$00;




*(unsigned short*)$D648=$080D;

exit_hypervisor();

}




void print_newline(){

current_screen_line = current_screen_line + $28;

current_screen_x=0;

}

void print_to_screen(char *message){

char* sc = current_screen_line+current_screen_x;

while(*message){

*sc++=*message++;

}

}

void syscall00(){

print_newline();

print_to_screen("syscall00 entered");

print_newline();

exit_hypervisor();

}

void syscall01(){

print_to_screen("syscall01 entered");

print_newline();

exit_hypervisor();

}

void syscall02() {

 exit_hypervisor();

 }

 void syscall03() {

 exit_hypervisor();

 }

 void syscall04() {

 exit_hypervisor();

 }

 void syscall05() {

 exit_hypervisor();

 }

 void syscall06() {

 exit_hypervisor();

 }

 void syscall07() {

 exit_hypervisor();

 }

 void syscall08() {

 exit_hypervisor();

 }

 void syscall09() {

 exit_hypervisor();

 }

 void syscall0A() {

 exit_hypervisor();

 }

 void syscall0B() {

 exit_hypervisor();

 }

 void syscall0C() {

 exit_hypervisor();

 }

 void syscall0D() {

 exit_hypervisor();

 }

 void syscall0E() {

 exit_hypervisor();

 }

 void syscall0F() {

 exit_hypervisor();

 }

 void syscall10() {

 exit_hypervisor();

 }

 void SECURENTR() {

 exit_hypervisor();

 }

 void SECUREXIT() {

 exit_hypervisor();

 }

 void syscall13() {

 exit_hypervisor();

 }

 void syscall14() {

 exit_hypervisor();

 }

 void syscall15() {

 exit_hypervisor();

 }

 void syscall16() {

 exit_hypervisor();

 }

 void syscall17() {

 exit_hypervisor();

 }

 void syscall18() {

 exit_hypervisor();

 }

 void syscall19() {

 exit_hypervisor();

 }

 void syscall1A() {

 exit_hypervisor();

 }

 void syscall1B() {

 exit_hypervisor();

 }

 void syscall1C() {

 exit_hypervisor();

 }

 void syscall1D() {

 exit_hypervisor();

 }

 void syscall1E() {

 exit_hypervisor();

 }

 void syscall1F() {

 exit_hypervisor();

 }

 void syscall20() {

 exit_hypervisor();

 }

 void syscall21() {

 exit_hypervisor();

 }

 void syscall22() {

 exit_hypervisor();

 }

 void syscall23() {

 exit_hypervisor();

 }

 void syscall24() {

 exit_hypervisor();

 }

 void syscall25() {

 exit_hypervisor();

 }

 void syscall26() {

 exit_hypervisor();

 }

 void syscall27() {

 exit_hypervisor();

 }

 void syscall28() {

 exit_hypervisor();

 }

 void syscall29() {

 exit_hypervisor();

 }

 void syscall2A() {

 exit_hypervisor();

 }

 void syscall2B() {

 exit_hypervisor();

 }

 void syscall2C() {

 exit_hypervisor();

 }

 void syscall2D() {

 exit_hypervisor();

 }

 void syscall2E() {

 exit_hypervisor();

 }

 void syscall2F() {

 exit_hypervisor();

 }

 void syscall30() {

 exit_hypervisor();

 }

 void syscall31() {

 exit_hypervisor();

 }

 void syscall32() {

 exit_hypervisor();

 }

 void syscall33() {

 exit_hypervisor();

 }

 void syscall34() {

 exit_hypervisor();

 }

 void syscall35() {

 exit_hypervisor();

 }

 void syscall36() {

 exit_hypervisor();

 }

 void syscall37() {

 exit_hypervisor();

 }

 void syscall38() {

 exit_hypervisor();

 }

 void syscall39() {

 exit_hypervisor();

 }

 void syscall3A() {

 exit_hypervisor();

 }

 void syscall3B() {

 exit_hypervisor();

 }

 void syscall3C() {

 exit_hypervisor();

 }

 void syscall3D() {

 exit_hypervisor();

 }

 void syscall3E() {

 exit_hypervisor();

 }

 void syscall3F() {

 exit_hypervisor();

 }

void RESET() {

current_screen_line = $0400;

current_screen_x = 0;            

*VIC_MEMORY = 0x14;

memset(SCREEN,' ',40*25);

 memset(COLS, WHITE, 40*25);

//char* sc=SCREEN+40;

//char* msg = MESSAGE;

 while(false){

if(*RASTER==54 || *RASTER==65){

*BGCOL = WHITE;

exit_hypervisor();

}

}

print_to_screen(MESSAGE);




start_simple_program();

}




void CPUKIL() {

exit_hypervisor();

}

void RESERVED() {

exit_hypervisor();

}




void VF011RD() {

exit_hypervisor();

}

void VF011WR() {

exit_hypervisor();

}

void ALTTABKEY() {

exit_hypervisor();

}

void RESTORKEY(){

exit_hypervisor();

}

void PAGFAULT(){

exit_hypervisor();

}

void UNDEFINE_TRAP() {

exit_hypervisor();

}

void exit_hypervisor(){

*(unsigned char*)$D67F=$01;

}

//Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.

#pragma data_seg(Syscall)

// The structure of each entry point is JMP <handler sddress> + NOp.

// We have a char 9xjmp) to hold the opcode for the JMP instruction,

// and then put the address of the SYSCALL/trap handler in the next

// two points as a pointer, and end with the NoP instruction opcode.

struct Syscall {

char xjmp; 

void()* syscall;

char xnop;

};




const char JMP = 0x4c;

const char NOP = 0xea;




export struct Syscall[] SYSCALLS = {

{ JMP, &syscall00, NOP },

  { JMP, &syscall01, NOP },

  { JMP, &syscall02, NOP },

  { JMP, &syscall03, NOP },

  { JMP, &syscall04, NOP },

  { JMP, &syscall05, NOP },

  { JMP, &syscall06, NOP },

  { JMP, &syscall07, NOP },

  { JMP, &syscall08, NOP },

  { JMP, &syscall09, NOP },

  { JMP, &syscall0A, NOP },

  { JMP, &syscall0B, NOP },

  { JMP, &syscall0C, NOP },

  { JMP, &syscall0D, NOP },

  { JMP, &syscall0E, NOP },

  { JMP, &syscall0F, NOP },

  { JMP, &syscall10, NOP },

  { JMP, &SECURENTR, NOP },

  { JMP, &SECUREXIT, NOP },

  { JMP, &syscall13, NOP },

  { JMP, &syscall14, NOP },

  { JMP, &syscall15, NOP },

  { JMP, &syscall16, NOP },

  { JMP, &syscall17, NOP },

  { JMP, &syscall18, NOP },

  { JMP, &syscall19, NOP },

  { JMP, &syscall1A, NOP },

  { JMP, &syscall1B, NOP },

  { JMP, &syscall1C, NOP },

  { JMP, &syscall1D, NOP },

  { JMP, &syscall1E, NOP },

  { JMP, &syscall1F, NOP },

  { JMP, &syscall20, NOP },

  { JMP, &syscall21, NOP },

  { JMP, &syscall22, NOP },

  { JMP, &syscall23, NOP },

  { JMP, &syscall24, NOP },

  { JMP, &syscall25, NOP },

  { JMP, &syscall26, NOP },

  { JMP, &syscall27, NOP },

  { JMP, &syscall28, NOP },

  { JMP, &syscall29, NOP },

  { JMP, &syscall2A, NOP },

  { JMP, &syscall2B, NOP },

  { JMP, &syscall2C, NOP },

  { JMP, &syscall2D, NOP },

  { JMP, &syscall2E, NOP },

  { JMP, &syscall2F, NOP },

  { JMP, &syscall30, NOP },

  { JMP, &syscall31, NOP },

  { JMP, &syscall32, NOP },

  { JMP, &syscall33, NOP },

  { JMP, &syscall34, NOP },

  { JMP, &syscall35, NOP },

  { JMP, &syscall36, NOP },

  { JMP, &syscall37, NOP },

  { JMP, &syscall38, NOP },

  { JMP, &syscall39, NOP },

  { JMP, &syscall3A, NOP },

  { JMP, &syscall3B, NOP },

  { JMP, &syscall3C, NOP },

  { JMP, &syscall3D, NOP },

  { JMP, &syscall3E, NOP },

  { JMP, &syscall3F, NOP }

};

// In this example we had only two SYSCALLs defined, so rather than having

// another 62 lines, we can just ask KickC to make the TRAP table begin

// at the next multiple of $100, i.e., at $8100.




export align(0x100) struct Syscall[] SYSCALL_TRAPS = {

{ JMP, &RESET, NOP},

{ JMP, &PAGFAULT, NOP},

{ JMP, &RESTORKEY, NOP},

{ JMP, &ALTTABKEY, NOP},

{ JMP, &VF011RD, NOP},

{ JMP, &VF011WR, NOP},

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP} ,

{ JMP, &UNDEFINE_TRAP, NOP}




};
